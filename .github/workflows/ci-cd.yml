name: CI/CD Pipeline

# Required GitHub Secret:
# PYPI_API_TOKEN - Your PyPI API token for package deployment
# Get it from: https://pypi.org/manage/account/token/
# Add it in: GitHub Repo → Settings → Secrets and variables → Actions

on:
  push:
    tags: [ 'v*' ]  # Run workflow on tags starting with 'v'
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run code formatting check
      run: |
        isort --check-only mosaia/ tests/
        black --check mosaia/ tests/
    
    - name: Run linting
      run: |
        flake8 mosaia/ tests/
    
    - name: Run tests
      run: |
        pytest --cov=mosaia --cov-report=xml --cov-report=term-missing -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Extract version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Building version ${{ env.version }}"
        else
          echo "Building from branch"
        fi

    - name: Update package version
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        VERSION=${{ env.version }}
        echo "Updating package files to version $VERSION"
        
        # Update pyproject.toml
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
        
        # Update setup.py
        sed -i "s/^    version=\".*\"/    version=\"$VERSION\"/" setup.py
        
        # Update mosaia/__init__.py
        sed -i "s/^__version__ = \".*\"/__version__ = \"$VERSION\"/" mosaia/__init__.py
        
        echo "Version updated to $VERSION in all package files"
        
        # Verify the updates
        echo "Verifying version updates:"
        echo "pyproject.toml: $(grep '^version = ' pyproject.toml)"
        echo "setup.py: $(grep '^    version=' setup.py)"
        echo "mosaia/__init__.py: $(grep '^__version__ = ' mosaia/__init__.py)"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Deploying to PyPI..."
        twine upload dist/*
        echo "Successfully deployed to PyPI!"

  # deploy-docs: Disabled for initial release - documentation will be added in future versions
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'release' || github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.11"
  #   
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -e .[docs]
  #   
  #   - name: Build documentation
  #     run: |
  #       cd docs
  #       make html
  #   
  #   - name: Deploy to GitHub Pages
  #     uses: peaceiris/actions-gh-pages@v4
  #     if: github.ref == 'refs/heads/main'
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       publish_dir: ./docs/_build/html
